# 다함 급식관리 시스템 - 파일 구조 및 역할 설명
작성일: 2025-09-02
작성자: Claude Code Assistant

================================================================================
## 📁 전체 파일 구조
================================================================================

다함-급식관리-시스템/
├── 🔧 백엔드 (서버 & 데이터베이스)
│   ├── main.py                              # FastAPI 서버 + API 엔드포인트
│   ├── models.py                            # 데이터베이스 테이블 정의
│   ├── business_logic.py                    # 비즈니스 로직 (계산 등)
│   ├── meal_management.db                   # SQLite 데이터베이스 파일
│   └── run_server_production.bat           # 서버 실행 스크립트
│
├── 🖥️ 프론트엔드 (사용자 인터페이스)
│   ├── menu_recipe_management.html         # 메인 페이지 (식단/레시피 관리)
│   ├── admin_dashboard.html                # 관리자 대시보드
│   ├── business_location_management_v2.html # 사업장 관리
│   ├── supplier_management.html            # 협력업체 관리
│   ├── meal_count_management.html          # 식수 관리
│   ├── supplier_management_backup.html     # 협력업체 관리 백업파일
│   └── business_location_management_backup.html # 사업장 관리 백업파일
│
├── 📄 문서 및 데이터
│   ├── PROJECT_STATUS.md                   # 프로젝트 진행 상황
│   ├── 파일 구조설명.txt                   # 이 파일
│   ├── 📋 사용자 실행 가이드 요약.txt        # 사용자 매뉴얼
│   └── sample data/                        # 샘플 데이터 폴더
│       └── 업체코드 관리.pptx               # 업체코드 관리 참고자료
│
└── ⚙️ 설정 파일
    ├── .claude/                            # Claude Code 설정
    ├── __pycache__/                        # Python 캐시 파일들
    └── test_system.py                       # 시스템 테스트 스크립트

================================================================================
## 🔧 백엔드 파일 상세 설명
================================================================================

### main.py (핵심 서버 파일)
- 역할: FastAPI 웹 서버 + 모든 API 엔드포인트
- 포함 기능:
  * 사업장 관리 API (/api/admin/sites/*)
  * 협력업체 관리 API (/api/admin/suppliers/*)
  * 사업장-협력업체 매핑 API (/api/admin/customer-supplier-mappings/*)
  * 식단/메뉴 관리 API
  * 사용자 인증 및 세션 관리
- 연관 파일: 모든 HTML 파일과 연결

### models.py (데이터베이스 모델)
- 역할: SQLAlchemy ORM 모델 정의
- 주요 테이블:
  * Customer (사업장 정보)
  * Supplier (협력업체 정보)
  * CustomerSupplierMapping (사업장-협력업체 매핑)
  * Menu, MenuItem, Recipe (식단/메뉴 관리)
  * User (사용자 관리)
- 연관 파일: main.py에서 import하여 사용

### business_logic.py
- 역할: 복잡한 비즈니스 로직 처리
- 기능: 영양 계산, 비용 분석, 메뉴 계산 등
- 연관 파일: main.py에서 호출

### meal_management.db
- 역할: SQLite 데이터베이스 파일
- 내용: 모든 시스템 데이터 저장
- 백업 권장: 정기적으로 백업 필요

================================================================================
## 🖥️ 프론트엔드 파일 상세 설명
================================================================================

### menu_recipe_management.html (메인 페이지)
- 역할: 시스템의 메인 허브, 식단/레시피 관리
- 주요 기능:
  * 식단 계획 수립
  * 레시피 관리
  * 메뉴 구성
- API 연결: /api/menus/*, /api/recipes/* 등
- 접근 방법: http://localhost:8002/

### admin_dashboard.html (관리자 대시보드)
- 역할: 시스템 관리 및 설정
- 주요 기능:
  * 사업장-협력업체 매핑 관리
  * 다중 협력업체 매핑 추가
  * 배송코드(사업장코드) 관리
- API 연결: /api/admin/customer-supplier-mappings/*
- 접근 방법: http://localhost:8002/admin/dashboard

### business_location_management_v2.html (사업장 관리)
- 역할: 사업장(고객사) 정보 관리
- 주요 기능:
  * 사업장 등록/수정/삭제
  * 사업장별 협력업체 다중 등록
  * 사업장코드 관리 (선택사항)
- API 연결: /api/admin/sites/*
- 접근 방법: http://localhost:8002/admin/business-locations
- 특징: 사업장코드는 선택사항 (본사/중앙창고는 생략 가능)

### supplier_management.html (협력업체 관리)
- 역할: 협력업체 정보 관리
- 주요 기능:
  * 협력업체 등록/수정/삭제
  * 업체코드(모코드) 관리
  * 업체 유형 분류
- API 연결: /api/admin/suppliers/*
- 접근 방법: http://localhost:8002/admin/suppliers
- 특징: 간소화된 입력 폼 (업체명, 모코드, 유형, 연락처, 주소)

### meal_count_management.html
- 역할: 식수 관리
- 기능: 일별 식수 계획 및 관리
- 상태: 기본 구현 완료

================================================================================
## 🔄 페이지별 연관 관계 및 데이터 흐름
================================================================================

### 1. 협력업체 등록 프로세스
supplier_management.html → main.py → models.py (Supplier 테이블)
↓
업체코드(모코드) 저장 → 다른 페이지에서 활용

### 2. 사업장 등록 프로세스
business_location_management_v2.html → main.py → models.py (Customer 테이블)
↓
사업장코드 저장 (선택사항) → 배송코드 생성 시 활용

### 3. 매핑 관리 프로세스
admin_dashboard.html → main.py → models.py (CustomerSupplierMapping 테이블)
↓
배송코드 = 모코드 + "-" + 사업장코드 (사업장코드 없으면 모코드만)

### 4. 통합 워크플로우
1. supplier_management.html에서 협력업체 등록 (모코드 입력)
2. business_location_management_v2.html에서 사업장 등록 (사업장코드 선택사항)
3. admin_dashboard.html에서 매핑 관리 (배송코드 자동 생성)
4. menu_recipe_management.html에서 실제 급식 운영

================================================================================
## ⚙️ 설정 및 실행 방법
================================================================================

### 서버 실행
1. 방법1: run_server_production.bat 더블클릭
2. 방법2: 명령프롬프트에서 "uvicorn main:app --host 0.0.0.0 --port 8002 --reload"

### 접속 주소
- 메인 페이지: http://localhost:8002/
- 관리자 대시보드: http://localhost:8002/admin/dashboard
- 사업장 관리: http://localhost:8002/admin/business-locations
- 협력업체 관리: http://localhost:8002/admin/suppliers

### 데이터베이스 위치
- 파일: meal_management.db
- 위치: 프로젝트 루트 폴더
- 백업 권장: 정기적으로 복사해서 백업

================================================================================
## 🚨 중요 사항 및 주의점
================================================================================

### 백업 파일들
- supplier_management_backup.html: 협력업체 관리 이전 버전
- business_location_management_backup.html: 사업장 관리 이전 버전
- 삭제하지 말고 참고용으로 보관

### 핵심 개념
- 모코드: 협력업체의 기본 식별 코드
- 사업장코드: 각 사업장의 식별 코드 (선택사항)
- 배송코드: 실제 배송 시 사용하는 코드 (모코드-사업장코드 조합)

### 데이터 관계
Customer (사업장) ←→ CustomerSupplierMapping ←→ Supplier (협력업체)
- N:N 관계로 설계
- 한 사업장에 여러 협력업체 등록 가능
- 한 협력업체가 여러 사업장에 공급 가능

================================================================================
## 🔮 향후 개선 계획
================================================================================

### 우선순위 1 (필수)
- 데이터 검증 로직 강화
- 에러 처리 개선
- 사용자 경험(UX) 개선

### 우선순위 2 (개선)
- 데이터 내보내기/가져오기 기능
- 로그 시스템 구축
- 사용자 권한 관리 세분화

### 우선순위 3 (확장)
- 모바일 반응형 최적화
- 실시간 알림 시스템
- 고급 리포트 기능

================================================================================
## 📞 문의 및 지원
================================================================================

시스템 관련 문의사항이나 개선 요청이 있으시면 언제든지 말씀해 주세요.
이 문서는 시스템 변경 시 함께 업데이트됩니다.

마지막 업데이트: 2025-09-02
# 다함 급식관리 시스템 - 파일 구조 및 역할 설명
작성일: 2025-09-03 (대규모 모듈화 업데이트)
작성자: Claude Code Assistant

================================================================================
## 📁 전체 파일 구조
================================================================================

다함-급식관리-시스템/
├── 🔧 백엔드 (서버 & 데이터베이스) - **모듈화 완료 (2025-09-03)**
│   ├── main_new.py                          # 새로운 모듈화된 메인 서버 (181라인)
│   ├── main.py                              # 기존 서버 (4907라인, 호환성 유지)
│   ├── models.py                            # 기존 데이터베이스 모델 (호환성 유지)
│   ├── app/                                 # **새로운 모듈화된 구조**
│   │   ├── database.py                      # 데이터베이스 연결 관리
│   │   ├── models/                          # 데이터베이스 모델 (도메인별 분리)
│   │   │   ├── base.py                      # 기본 모델 클래스
│   │   │   ├── customers.py                 # 사업장 모델
│   │   │   ├── suppliers.py                 # 협력업체 모델
│   │   │   └── mappings.py                  # 매핑 모델
│   │   ├── services/                        # 비즈니스 로직 서비스 계층
│   │   │   ├── supplier_service.py          # 협력업체 서비스
│   │   │   └── (향후 추가 서비스들)
│   │   ├── api/                             # API 라우터 (도메인별 분리)
│   │   │   ├── auth.py                      # 인증 및 세션 관리
│   │   │   ├── suppliers.py                 # 협력업체 관리 API
│   │   │   ├── customers.py                 # 사업장 관리 API
│   │   │   ├── admin.py                     # 관리자 기능 API
│   │   │   ├── meal_plans.py                # 식단표 및 메뉴 관리 API
│   │   │   ├── operations.py                # 발주/입고/전처리 관리 API
│   │   │   └── dashboard.py                 # 통계 및 유틸리티 API
│   │   └── core/                            # 핵심 공통 기능
│   │       └── exceptions.py                # 사용자 정의 예외 처리
│   ├── business_logic.py                    # 기존 비즈니스 로직 (호환성 유지)
│   ├── meal_management.db                   # SQLite 데이터베이스 파일
│   └── run_server_production.bat           # 서버 실행 스크립트
│
├── 🖥️ 프론트엔드 (사용자 인터페이스)
│   ├── menu_recipe_management.html         # 메인 페이지 (식단/레시피 관리)
│   ├── admin_dashboard.html                # 관리자 대시보드
│   ├── business_location_management_v2.html # 사업장 관리
│   ├── supplier_management.html            # 협력업체 관리
│   ├── meal_count_management.html          # 식수 관리
│   ├── supplier_management_backup.html     # 협력업체 관리 백업파일
│   └── business_location_management_backup.html # 사업장 관리 백업파일
│
├── 📄 문서 및 데이터
│   ├── PROJECT_STATUS.md                   # 프로젝트 진행 상황
│   ├── 파일 구조설명.txt                   # 이 파일
│   ├── 📋 사용자 실행 가이드 요약.txt        # 사용자 매뉴얼
│   └── sample data/                        # 샘플 데이터 폴더
│       └── 업체코드 관리.pptx               # 업체코드 관리 참고자료
│
└── ⚙️ 설정 파일
    ├── .claude/                            # Claude Code 설정
    ├── __pycache__/                        # Python 캐시 파일들
    └── test_system.py                       # 시스템 테스트 스크립트

================================================================================
## 🔧 백엔드 파일 상세 설명 (모듈화 완료)
================================================================================

### **🚀 새로운 모듈화된 구조 (2025-09-03 업데이트)**

#### main_new.py (새로운 메인 서버 - 권장)
- 역할: 모듈화된 FastAPI 애플리케이션 진입점 (181라인)
- 특징: 깔끔한 구조, 도메인별 라우터 분리
- 실행: `uvicorn main_new:app --host 127.0.0.1 --port 8002 --reload`
- 장점: 유지보수 용이, 확장 가능, 명확한 책임 분리

#### app/database.py (데이터베이스 연결 관리)
- 역할: SQLAlchemy 엔진, 세션 관리, 커넥션 풀링
- 기능: SQLite 최적화 (WAL 모드, Foreign Key 활성화)
- 의존성: get_db() 함수로 세션 주입

#### app/models/ (도메인별 모델 분리)
- **base.py**: 기본 모델 클래스 (공통 필드, 메타데이터)
- **customers.py**: 사업장 모델 (계층 구조, 검증 로직)
- **suppliers.py**: 협력업체 모델 (데이터 무결성, 비즈니스 규칙)
- **mappings.py**: 사업장-협력업체 매핑 관계

#### app/services/ (비즈니스 로직 서비스 계층)
- **supplier_service.py**: 협력업체 CRUD, 검색, 통계, 중복 검사
- 역할: 트랜잭션 관리, 복잡한 비즈니스 로직, 예외 처리
- 패턴: 의존성 주입, 서비스 레이어 패턴

#### app/api/ (도메인별 API 라우터)
- **auth.py**: 인증, 로그인, 세션 관리, 권한 확인
- **suppliers.py**: 협력업체 CRUD API, 고급 검색, 통계
- **customers.py**: 사업장 CRUD API, 계층 관리, 매핑 관리
- **admin.py**: 관리자 기능, 사용자 관리, 시스템 설정
- **meal_plans.py**: 식단표, 메뉴, 레시피 관리, 비용 계산
- **operations.py**: 발주, 입고, 전처리, 계획 관리
- **dashboard.py**: 대시보드, 통계, 유틸리티, 샘플 데이터

#### app/core/exceptions.py (사용자 정의 예외 처리)
- 역할: 일관된 예외 처리, HTTP 상태 코드 매핑
- 예외 종류: BusinessLogicError, NotFoundError, DuplicateError 등

### **🔄 기존 구조 (호환성 유지)**

#### main.py (기존 서버 - 호환성 유지)
- 상태: 4907라인, 모든 기능이 한 파일에 집중
- 용도: 기존 시스템과의 호환성 유지
- 권장: 새로운 개발은 main_new.py 사용

#### models.py (기존 모델 - 호환성 유지)
- 역할: 기존 SQLAlchemy 모델 정의
- 상태: 호환성을 위해 유지
- 권장: 새로운 개발은 app/models/ 사용

#### business_logic.py (기존 비즈니스 로직)
- 역할: 복잡한 비즈니스 로직 처리
- 기능: 영양 계산, 비용 분석, 메뉴 계산 등
- 상태: 호환성을 위해 유지

#### meal_management.db
- 역할: SQLite 데이터베이스 파일
- 내용: 모든 시스템 데이터 저장
- 백업 권장: 정기적으로 백업 필요

================================================================================
## 🖥️ 프론트엔드 파일 상세 설명
================================================================================

### menu_recipe_management.html (메인 페이지)
- 역할: 시스템의 메인 허브, 식단/레시피 관리
- 주요 기능:
  * 식단 계획 수립
  * 레시피 관리
  * 메뉴 구성
- API 연결: /api/menus/*, /api/recipes/* 등
- 접근 방법: http://localhost:8002/

### admin_dashboard.html (관리자 대시보드)
- 역할: 시스템 관리 및 설정
- 주요 기능:
  * 사업장-협력업체 매핑 관리
  * 다중 협력업체 매핑 추가
  * 배송코드(사업장코드) 관리
- API 연결: /api/admin/customer-supplier-mappings/*
- 접근 방법: http://localhost:8002/admin/dashboard

### business_location_management_v2.html (사업장 관리)
- 역할: 사업장(고객사) 정보 관리
- 주요 기능:
  * 사업장 등록/수정/삭제
  * 사업장별 협력업체 다중 등록
  * 사업장코드 관리 (선택사항)
- API 연결: /api/admin/sites/*
- 접근 방법: http://localhost:8002/admin/business-locations
- 특징: 사업장코드는 선택사항 (본사/중앙창고는 생략 가능)

### supplier_management.html (협력업체 관리)
- 역할: 협력업체 정보 관리
- 주요 기능:
  * 협력업체 등록/수정/삭제
  * 업체코드(모코드) 관리
  * 업체 유형 분류
- API 연결: /api/admin/suppliers/*
- 접근 방법: http://localhost:8002/admin/suppliers
- 특징: 간소화된 입력 폼 (업체명, 모코드, 유형, 연락처, 주소)

### meal_count_management.html
- 역할: 식수 관리
- 기능: 일별 식수 계획 및 관리
- 상태: 기본 구현 완료

================================================================================
## 🔄 페이지별 연관 관계 및 데이터 흐름
================================================================================

### 1. 협력업체 등록 프로세스
supplier_management.html → main.py → models.py (Supplier 테이블)
↓
업체코드(모코드) 저장 → 다른 페이지에서 활용

### 2. 사업장 등록 프로세스
business_location_management_v2.html → main.py → models.py (Customer 테이블)
↓
사업장코드 저장 (선택사항) → 배송코드 생성 시 활용

### 3. 매핑 관리 프로세스
admin_dashboard.html → main.py → models.py (CustomerSupplierMapping 테이블)
↓
배송코드 = 모코드 + "-" + 사업장코드 (사업장코드 없으면 모코드만)

### 4. 통합 워크플로우
1. supplier_management.html에서 협력업체 등록 (모코드 입력)
2. business_location_management_v2.html에서 사업장 등록 (사업장코드 선택사항)
3. admin_dashboard.html에서 매핑 관리 (배송코드 자동 생성)
4. menu_recipe_management.html에서 실제 급식 운영

================================================================================
## ⚙️ 설정 및 실행 방법
================================================================================

### 서버 실행 (모듈화 업데이트)
**🚀 권장: 새로운 모듈화된 서버**
1. 명령프롬프트에서: `uvicorn main_new:app --host 127.0.0.1 --port 8002 --reload`
2. 또는 포트 8002: `python -m uvicorn main_new:app --host 127.0.0.1 --port 8002 --reload`

**🔄 기존 호환성 유지**
1. 방법1: run_server_production.bat 더블클릭 (기존 main.py 실행)
2. 방법2: 명령프롬프트에서 "uvicorn main:app --host 0.0.0.0 --port 8001 --reload" (기존)

### 접속 주소
**🚀 새로운 모듈화된 서버 (권장) - 포트 8002**
- 메인 페이지: http://localhost:8002/
- 관리자 대시보드: http://localhost:8002/admin/dashboard
- 사업장 관리: http://localhost:8002/admin/business-locations
- 협력업체 관리: http://localhost:8002/admin/suppliers
- API 문서: http://localhost:8002/docs (Swagger UI)
- 헬스체크: http://localhost:8002/health

**🔄 기존 서버 (호환성) - 포트 8001**
- 기존 주소들은 포트 8001로 접속

### 데이터베이스 위치
- 파일: meal_management.db
- 위치: 프로젝트 루트 폴더
- 백업 권장: 정기적으로 복사해서 백업

================================================================================
## 🚨 중요 사항 및 주의점
================================================================================

### 백업 파일들
- supplier_management_backup.html: 협력업체 관리 이전 버전
- business_location_management_backup.html: 사업장 관리 이전 버전
- 삭제하지 말고 참고용으로 보관

### 핵심 개념
- 모코드: 협력업체의 기본 식별 코드
- 사업장코드: 각 사업장의 식별 코드 (선택사항)
- 배송코드: 실제 배송 시 사용하는 코드 (모코드-사업장코드 조합)

### 데이터 관계
Customer (사업장) ←→ CustomerSupplierMapping ←→ Supplier (협력업체)
- N:N 관계로 설계
- 한 사업장에 여러 협력업체 등록 가능
- 한 협력업체가 여러 사업장에 공급 가능

================================================================================
## 🚀 모듈화 성과 및 개선사항 (2025-09-03)
================================================================================

### ✅ 완료된 대규모 모듈화 작업
- **96% 코드 감소**: main.py 4,907라인 → main_new.py 181라인
- **7개 도메인 라우터**: 명확한 관심사 분리 달성
- **3계층 아키텍처**: Models → Services → API 레이어
- **예외 처리 시스템**: 일관된 에러 메시지 및 HTTP 상태 코드
- **데이터베이스 최적화**: 커넥션 풀링, WAL 모드, 제약조건 활성화

### 🎯 모듈화로 달성한 이점
1. **유지보수성**: 코드 찾기 쉬움, 수정 영향 범위 최소화
2. **확장성**: 새로운 기능 추가 시 적절한 모듈에 배치
3. **테스트 가능성**: 각 모듈별 독립 테스트 가능
4. **코드 품질**: 중복 제거, 명확한 책임 분리
5. **개발 효율성**: 팀 개발 시 충돌 최소화

### 🔧 기술적 아키텍처 개선
- **의존성 주입**: 서비스 계층에서 세션 관리
- **트랜잭션 관리**: 비즈니스 로직에서 자동 롤백
- **사용자 정의 예외**: 명확한 에러 분류 및 처리
- **모델 검증**: 데이터 무결성 및 비즈니스 규칙 적용

================================================================================
## 🔮 향후 개선 계획 (업데이트)
================================================================================

### 우선순위 1 (모듈화 후속 작업)
- ✅ ~~모듈화 완료~~ (2025-09-03 완료)
- 나머지 서비스 레이어 구현 (Customer, Admin 서비스)
- 통합 테스트 스위트 구축
- 기존 main.py에서 main_new.py로의 완전 이전

### 우선순위 2 (시스템 강화)
- 데이터 검증 로직 강화
- 인증 미들웨어 개선
- 로깅 시스템 구축
- 데이터베이스 마이그레이션 시스템

### 우선순위 3 (기능 확장)
- 데이터 내보내기/가져오기 기능
- 사용자 권한 관리 세분화
- 실시간 알림 시스템
- 모바일 반응형 최적화

================================================================================
## 📞 문의 및 지원
================================================================================

시스템 관련 문의사항이나 개선 요청이 있으시면 언제든지 말씀해 주세요.
이 문서는 시스템 변경 시 함께 업데이트됩니다.

**🚀 주요 업데이트 이력:**
- 2025-09-03: 대규모 모듈화 완료 (4,907라인 → 181라인, 96% 감소)
- 2025-09-02: 초기 문서 작성

마지막 업데이트: 2025-09-03 (모듈화 완료)